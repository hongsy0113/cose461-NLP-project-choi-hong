{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LSTM(gender)","provenance":[{"file_id":"https://github.com/hongsy0113/cose461-NLP-project-choi-hong/blob/main/LSTM.ipynb","timestamp":1638157828322}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"e4m9MYGG4qE2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"395cb7c0-a495-49aa-ae6f-d20b875d30a7"},"source":["# If you didn't install these packages, run these cells.\n","!pip install soynlp\n","!pip install konlpy\n","\n","from soynlp.normalizer import *\n","import soynlp\n","\n","import json\n","from pandas import json_normalize\n","\n","import torch\n","from torch import nn\n","\n","import numpy as np\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import re\n","import urllib.request\n","from konlpy.tag import Okt\n","from tqdm import tqdm\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting soynlp\n","  Downloading soynlp-0.0.493-py3-none-any.whl (416 kB)\n","\u001b[K     |████████████████████████████████| 416 kB 5.3 MB/s \n","\u001b[?25hRequirement already satisfied: psutil>=5.0.1 in /usr/local/lib/python3.7/dist-packages (from soynlp) (5.4.8)\n","Requirement already satisfied: numpy>=1.12.1 in /usr/local/lib/python3.7/dist-packages (from soynlp) (1.19.5)\n","Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.7/dist-packages (from soynlp) (1.0.1)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from soynlp) (1.4.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->soynlp) (3.0.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->soynlp) (1.1.0)\n","Installing collected packages: soynlp\n","Successfully installed soynlp-0.0.493\n","Collecting konlpy\n","  Downloading konlpy-0.5.2-py2.py3-none-any.whl (19.4 MB)\n","\u001b[K     |████████████████████████████████| 19.4 MB 1.2 MB/s \n","\u001b[?25hRequirement already satisfied: tweepy>=3.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (3.10.0)\n","Collecting JPype1>=0.7.0\n","  Downloading JPype1-1.3.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (448 kB)\n","\u001b[K     |████████████████████████████████| 448 kB 49.0 MB/s \n","\u001b[?25hCollecting colorama\n","  Downloading colorama-0.4.4-py2.py3-none-any.whl (16 kB)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.19.5)\n","Collecting beautifulsoup4==4.6.0\n","  Downloading beautifulsoup4-4.6.0-py3-none-any.whl (86 kB)\n","\u001b[K     |████████████████████████████████| 86 kB 5.3 MB/s \n","\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (4.2.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (3.10.0.2)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (1.3.0)\n","Requirement already satisfied: requests[socks]>=2.11.1 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (2.23.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tweepy>=3.7.0->konlpy) (1.15.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->tweepy>=3.7.0->konlpy) (3.1.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (2021.10.8)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.7/dist-packages (from requests[socks]>=2.11.1->tweepy>=3.7.0->konlpy) (1.7.1)\n","Installing collected packages: JPype1, colorama, beautifulsoup4, konlpy\n","  Attempting uninstall: beautifulsoup4\n","    Found existing installation: beautifulsoup4 4.6.3\n","    Uninstalling beautifulsoup4-4.6.3:\n","      Successfully uninstalled beautifulsoup4-4.6.3\n","Successfully installed JPype1-1.3.0 beautifulsoup4-4.6.0 colorama-0.4.4 konlpy-0.5.2\n"]}]},{"cell_type":"code","metadata":{"id":"hFr8oBdHAv-t","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8446b1ca-4d7c-4d7b-f250-ad2463816471"},"source":["# json data 파일들을 google drive에 저장\n","# google drive 에 있는 파일들을 접근하기 위해 mount\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"markdown","metadata":{"id":"U3FLaHkDZG9M"},"source":["# Experiment : LSTM model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"1cLhjHa0dfq7","outputId":"481742f0-50dd-45c9-f49c-b2e8b7aeed52"},"source":["df = pd.read_csv('/content/gdrive/MyDrive/cose461/data_100.csv')\n","df.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>utterance</th>\n","      <th>P_gender</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>('9fdbaeb2-3f1a-5ba2-a6a6-53d9a57fd33d', 'P02')</td>\n","      <td>학교 6일에감 내일가냐? 불썅 ㅇㅎㅇㅎ ㅇㅇㅇㅇ왜안산에있어 다1교시얔ㅋㅋ</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>('3fb66713-37a2-50e5-9b0a-afb898c06eea', 'P02')</td>\n","      <td>천처니 오십셔,, 한 다섯시 맞춰서 오면 되지않으까 싶네욤 ㅎㅎ 흑흑 보고파 오뤼 ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>('642fd586-be49-5bd9-b596-ccb2c8badab6', 'P02')</td>\n","      <td>ㅋㅋㅋㅋㅋㅋㅋ 더워? 하긴여기도 그렇게안추워 ㅋㅋㅋㅋㅋㅋ벌써마지막이야?? 오늘 하루...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>('b8d86fc3-2154-562c-b8d6-bb566d72fa4f', 'P02')</td>\n","      <td>딱히읍지 나야 왜?? 인스타보니까 놀러가신거? 13일에 오는거야? 구래 볼수있늠 보...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>('ce82e17c-5730-5ed4-8bf9-40eac1f5d99a', 'P01')</td>\n","      <td>속초에 월, 화 비온다고 되어있는데 화부턴 날씨가 추워지더라고 2도 내생각엔 오빠 ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>('c4cda8af-f443-5add-9c5d-c17859c975ae', 'P01')</td>\n","      <td>근데 커피를 저기다가 흘릴일이없거든 ... ㅋㅋㅋㅋ 배고프당 너무너무너무너무 나 지...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>('a700867e-3173-5b98-b6fb-f8648d6d7fea', 'P02')</td>\n","      <td>아니~ 단식원은 가본적 없어 단식원을 왜 가~ 가서 고생만 해 어차피 그런거는 다시...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>('d40c6bef-e632-5a8c-b2ac-2e910f8b3bf6', 'P02')</td>\n","      <td>제관 팀플장소 차서 카퍼ㅣ드림 왔어 아이쿠,, 글게말야 ㅋㅋㅋㅋㅋㄱ 있오 나 수업 ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>('93ba610a-57ed-5d0e-991e-1698ebeebb51', 'P02')</td>\n","      <td>주말 평일은 시간없는뎅 토욜밖에안됨 ㅇㅇ 나도 그때 제본이랑 짐정리해야됨</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>('9bd9dfd5-e432-5d15-aaff-17a3c2cdf440', 'P01')</td>\n","      <td>한번 배워보고싶긴하다 오빠한테 물어봐야겠네 아~ 카페에서 커피 여유롭게 마시고싶다 ...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             index  ... P_gender\n","0  ('9fdbaeb2-3f1a-5ba2-a6a6-53d9a57fd33d', 'P02')  ...        0\n","1  ('3fb66713-37a2-50e5-9b0a-afb898c06eea', 'P02')  ...        0\n","2  ('642fd586-be49-5bd9-b596-ccb2c8badab6', 'P02')  ...        0\n","3  ('b8d86fc3-2154-562c-b8d6-bb566d72fa4f', 'P02')  ...        0\n","4  ('ce82e17c-5730-5ed4-8bf9-40eac1f5d99a', 'P01')  ...        0\n","5  ('c4cda8af-f443-5add-9c5d-c17859c975ae', 'P01')  ...        0\n","6  ('a700867e-3173-5b98-b6fb-f8648d6d7fea', 'P02')  ...        0\n","7  ('d40c6bef-e632-5a8c-b2ac-2e910f8b3bf6', 'P02')  ...        0\n","8  ('93ba610a-57ed-5d0e-991e-1698ebeebb51', 'P02')  ...        0\n","9  ('9bd9dfd5-e432-5d15-aaff-17a3c2cdf440', 'P01')  ...        0\n","\n","[10 rows x 3 columns]"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"3en9Iwwb0Wsh"},"source":["## data pre-processing"]},{"cell_type":"code","metadata":{"id":"Q0C5o1KXCyQH"},"source":["from soynlp.normalizer import *\n","from konlpy.tag import Okt\n","import re\n","\n","okt = Okt()\n","\n","def clean(doc) :\n","\n","  new_doc = list()\n","  doc = okt.pos(doc, norm=True)\n","\n","  stop_tags = ['Determiner', 'Josa', 'Foreign']\n","  stop_words = ['은', '는', '이', '가', '', '이름', '계정', '주소', '신원', '전번', '금융', '번호', '소속', '기타']\n","  for text, tag in doc:  \n","\n","    if tag in stop_tags:\n","      continue\n","\n","    text = re.sub(r'[^ㄱ-ㅣ가-힣?.!~\\^]+', '', text)  # remove digits.  \n","    text = emoticon_normalize(text, num_repeats=2) # remove repeated emoticon. e.g) ㅋㅋㅋㅋ=>ㅋㅋ, ㅠㅠㅠㅠ=>ㅠㅠ\n","    text = repeat_normalize(text, num_repeats=1) # remove repeated character\n","    \n","    if text in stop_words or (tag=='Verb' and len(text)<=1):\n","      continue\n","      \n","    new_doc.append(text)\n","\n","  return new_doc"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uzQd3_r6Sqlp"},"source":["df['sents'] = df['utterance'].apply(clean)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oOkhWVQ90eFP"},"source":["### train, test data 만들기 및 정수 인코딩"]},{"cell_type":"code","metadata":{"id":"1RsXO5MKKTWH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4d67ac16-2541-4400-ee02-ae7cd520a33d"},"source":["X = df['sents']\n","y = df['P_gender']\n","\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)\n","#X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=7)\n","\n","print(len(X_train))\n","print(len(y_train))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["800388\n","800388\n"]}]},{"cell_type":"code","metadata":{"id":"j3VpFun6P2SY"},"source":["tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(X_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VgdGogzYPtHD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6109d4cc-d68e-4a28-ff5b-a5254726cfed"},"source":["print(tokenizer.word_index)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","metadata":{"id":"ZEoQZw53QUzi","colab":{"base_uri":"https://localhost:8080/"},"outputId":"09bad78f-2c24-4545-ea14-74c3e22c56c8"},"source":["threshold = 3\n","total_cnt = len(tokenizer.word_index) # 단어의 수\n","rare_cnt = 0 # 등장 빈도수가 threshold보다 작은 단어의 개수를 카운트\n","total_freq = 0 # 훈련 데이터의 전체 단어 빈도수 총 합\n","rare_freq = 0 # 등장 빈도수가 threshold보다 작은 단어의 등장 빈도수의 총 합\n","\n","# 단어와 빈도수의 쌍(pair)을 key와 value로 받는다.\n","for key, value in tokenizer.word_counts.items():\n","    total_freq = total_freq + value\n","\n","    # 단어의 등장 빈도수가 threshold보다 작으면\n","    if(value < threshold):\n","        rare_cnt = rare_cnt + 1\n","        rare_freq = rare_freq + value\n","\n","print('단어 집합(vocabulary)의 크기 :',total_cnt)\n","print('등장 빈도가 %s번 이하인 희귀 단어의 수: %s'%(threshold - 1, rare_cnt))\n","print(\"단어 집합에서 희귀 단어의 비율:\", (rare_cnt / total_cnt)*100)     # data 적게 할 때는 division by zero 나올수도\n","print(\"전체 등장 빈도에서 희귀 단어 등장 빈도 비율:\", (rare_freq / total_freq)*100)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["단어 집합(vocabulary)의 크기 : 597233\n","등장 빈도가 2번 이하인 희귀 단어의 수: 427538\n","단어 집합에서 희귀 단어의 비율: 71.58646625353924\n","전체 등장 빈도에서 희귀 단어 등장 빈도 비율: 2.374021745163459\n"]}]},{"cell_type":"code","metadata":{"id":"49HpD6EbQZzn","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8827daad-adf5-4c7c-9610-894ba5becd67"},"source":["# 전체 단어 개수 중 빈도수 threshold 이하인 단어는 제거.\n","# 0번 패딩 토큰을 고려하여 + 1\n","vocab_size = total_cnt - rare_cnt + 1\n","print('단어 집합의 크기 :',vocab_size)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["단어 집합의 크기 : 169696\n"]}]},{"cell_type":"code","metadata":{"id":"wGp5qrHyQde1"},"source":["tokenizer = Tokenizer(vocab_size) \n","tokenizer.fit_on_texts(X_train)\n","X_train = tokenizer.texts_to_sequences(X_train)\n","X_test = tokenizer.texts_to_sequences(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4oPrFFfpQ7oJ"},"source":["y_train = np.array(y_train)\n","y_test = np.array(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HD8mPiuF0kK2"},"source":["### 빈 데이터 제거"]},{"cell_type":"code","metadata":{"id":"j0oFQWaNoF4d"},"source":["drop_train = [index for index, sentence in enumerate(X_train) if len(sentence) < 1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vv95-JyloHpR","colab":{"base_uri":"https://localhost:8080/"},"outputId":"61d4fc91-8ea2-4e1d-8604-a054acc83c66"},"source":["# 빈 샘플들을 제거\n","X_train = np.delete(X_train, drop_train, axis=0)\n","y_train = np.delete(y_train, drop_train, axis=0)\n","print(len(X_train))\n","print(len(y_train))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["800143\n","800143\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order)\n"]}]},{"cell_type":"markdown","metadata":{"id":"hko7dCr40pzy"},"source":["### 패딩"]},{"cell_type":"code","metadata":{"id":"R_Yq-mq8R0Jf","colab":{"base_uri":"https://localhost:8080/","height":315},"outputId":"538d86d4-8dfe-4ff4-a194-39511772989c"},"source":["print('메시지의 최대 길이 :',max(len(l) for l in X_train))\n","print('메시지의 평균 길이 :',sum(map(len, X_train))/len(X_train))\n","plt.hist([len(s) for s in X_train], bins=50)\n","plt.xlabel('length of samples')\n","plt.ylabel('number of samples')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["메시지의 최대 길이 : 1215\n","메시지의 평균 길이 : 25.719396407892088\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WjNMmaB2SQza","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a1a4fe24-cff1-40c5-c38f-146a1e0dea50"},"source":["def below_threshold_len(max_len, nested_list):\n","  count = 0\n","  for sentence in nested_list:\n","    if(len(sentence) <= max_len):\n","        count = count + 1\n","  print('전체 샘플 중 길이가 %s 이하인 샘플의 비율: %s'%(max_len, (count / len(nested_list))*100))\n","\n","below_threshold_len(50,X_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["전체 샘플 중 길이가 50 이하인 샘플의 비율: 93.4512955809149\n"]}]},{"cell_type":"code","metadata":{"id":"6T0ovxUDSdfd"},"source":["max_len = 50\n","X_train = pad_sequences(X_train, maxlen = max_len)\n","X_test = pad_sequences(X_test, maxlen = max_len)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R06jpcw00uVP"},"source":["### 모델 정의 및 train"]},{"cell_type":"code","metadata":{"id":"NR0DkfIzSjEv"},"source":["from tensorflow.keras.layers import Embedding, Dense, LSTM, Conv1D, MaxPooling1D, Dropout, Bidirectional, BatchNormalization\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.regularizers import L2, L1\n","\n","es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=2)\n","mc = ModelCheckpoint('best_model.h5', monitor='val_acc', mode='max', verbose=0, save_best_only=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AHQsJTg6SkcO"},"source":["embedding_dim = 100\n","hidden_units = 64\n","\n","model = Sequential()\n","model.add(Embedding(vocab_size, embedding_dim))\n","model.add(LSTM(hidden_units))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=2)\n","mc = ModelCheckpoint('best_model.h5', monitor='val_acc', mode='max', verbose=0, save_best_only=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iLKAonnvr3NB","outputId":"9470edf5-d7af-4357-8c3f-52475c350549"},"source":["embedding_dim = [50, 100, 150]\n","hidden_units = [64, 128, 256]\n","dropout_probability = [0, 0.2]\n","n_iter = 1\n","for e in embedding_dim :\n","  for h in hidden_units :\n","    for d in dropout_probability :\n","      model = Sequential()\n","      model.add(Embedding(vocab_size, e))\n","      model.add(LSTM(h))\n","      model.add(Dropout(d))\n","      model.add(Dense(1, activation='sigmoid'))\n","\n","      print(\"============{} iteration ============\".format(n_iter))\n","      print(\"embedding_dim : {}, hidden_units : {}, dropout_prob : {}\".format(e, h, d))\n","      model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","      history = model.fit(X_train, y_train, epochs=15, callbacks=[es, mc], batch_size=64, validation_split=0.2) \n","      loaded_model = load_model('best_model.h5')\n","      print(\"\\n 테스트 정확도: %.4f\" % (loaded_model.evaluate(X_test, y_test)[1]))\n","      print('====================================')\n","      n_iter += 1"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["============1 iteration ============\n","embedding_dim : 50, hidden_units : 64, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 202s 20ms/step - loss: 0.5886 - acc: 0.6814 - val_loss: 0.5800 - val_acc: 0.6908\n","Epoch 2/15\n","10002/10002 [==============================] - 188s 19ms/step - loss: 0.5463 - acc: 0.7187 - val_loss: 0.5642 - val_acc: 0.7020\n","Epoch 3/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5092 - acc: 0.7475 - val_loss: 0.5699 - val_acc: 0.7019\n","Epoch 4/15\n","10002/10002 [==============================] - 186s 19ms/step - loss: 0.4841 - acc: 0.7651 - val_loss: 0.5844 - val_acc: 0.6996\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5629 - acc: 0.7029\n","\n"," 테스트 정확도: 0.7029\n","====================================\n","============2 iteration ============\n","embedding_dim : 50, hidden_units : 64, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 196s 19ms/step - loss: 0.5898 - acc: 0.6808 - val_loss: 0.5792 - val_acc: 0.6887\n","Epoch 2/15\n","10002/10002 [==============================] - 193s 19ms/step - loss: 0.5498 - acc: 0.7167 - val_loss: 0.5631 - val_acc: 0.7047\n","Epoch 3/15\n","10002/10002 [==============================] - 187s 19ms/step - loss: 0.5166 - acc: 0.7424 - val_loss: 0.5622 - val_acc: 0.7048\n","Epoch 4/15\n","10002/10002 [==============================] - 187s 19ms/step - loss: 0.4954 - acc: 0.7574 - val_loss: 0.5788 - val_acc: 0.7004\n","Epoch 5/15\n","10002/10002 [==============================] - 187s 19ms/step - loss: 0.4750 - acc: 0.7716 - val_loss: 0.5807 - val_acc: 0.7006\n","Epoch 00005: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5608 - acc: 0.7060\n","\n"," 테스트 정확도: 0.7060\n","====================================\n","============3 iteration ============\n","embedding_dim : 50, hidden_units : 128, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 191s 19ms/step - loss: 0.5892 - acc: 0.6808 - val_loss: 0.5724 - val_acc: 0.6959\n","Epoch 2/15\n","10002/10002 [==============================] - 186s 19ms/step - loss: 0.5445 - acc: 0.7200 - val_loss: 0.5620 - val_acc: 0.7048\n","Epoch 3/15\n","10002/10002 [==============================] - 185s 19ms/step - loss: 0.5130 - acc: 0.7447 - val_loss: 0.5626 - val_acc: 0.7046\n","Epoch 4/15\n","10002/10002 [==============================] - 187s 19ms/step - loss: 0.4897 - acc: 0.7612 - val_loss: 0.5726 - val_acc: 0.7000\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5608 - acc: 0.7060\n","\n"," 테스트 정확도: 0.7060\n","====================================\n","============4 iteration ============\n","embedding_dim : 50, hidden_units : 128, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5906 - acc: 0.6802 - val_loss: 0.5771 - val_acc: 0.6957\n","Epoch 2/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5495 - acc: 0.7173 - val_loss: 0.5658 - val_acc: 0.7015\n","Epoch 3/15\n","10002/10002 [==============================] - 197s 20ms/step - loss: 0.5174 - acc: 0.7425 - val_loss: 0.5645 - val_acc: 0.7030\n","Epoch 4/15\n","10002/10002 [==============================] - 185s 18ms/step - loss: 0.4941 - acc: 0.7592 - val_loss: 0.5776 - val_acc: 0.7008\n","Epoch 5/15\n","10002/10002 [==============================] - 193s 19ms/step - loss: 0.4696 - acc: 0.7761 - val_loss: 0.6004 - val_acc: 0.6940\n","Epoch 00005: early stopping\n","6254/6254 [==============================] - 60s 10ms/step - loss: 0.5608 - acc: 0.7060\n","\n"," 테스트 정확도: 0.7060\n","====================================\n","============5 iteration ============\n","embedding_dim : 50, hidden_units : 256, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 225s 22ms/step - loss: 0.5913 - acc: 0.6796 - val_loss: 0.5753 - val_acc: 0.6930\n","Epoch 2/15\n","10002/10002 [==============================] - 221s 22ms/step - loss: 0.5488 - acc: 0.7167 - val_loss: 0.5682 - val_acc: 0.7007\n","Epoch 3/15\n","10002/10002 [==============================] - 220s 22ms/step - loss: 0.5172 - acc: 0.7419 - val_loss: 0.5623 - val_acc: 0.7041\n","Epoch 4/15\n","10002/10002 [==============================] - 224s 22ms/step - loss: 0.4959 - acc: 0.7578 - val_loss: 0.5715 - val_acc: 0.6994\n","Epoch 5/15\n","10002/10002 [==============================] - 222s 22ms/step - loss: 0.4717 - acc: 0.7750 - val_loss: 0.5814 - val_acc: 0.6946\n","Epoch 00005: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5608 - acc: 0.7060\n","\n"," 테스트 정확도: 0.7060\n","====================================\n","============6 iteration ============\n","embedding_dim : 50, hidden_units : 256, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 227s 22ms/step - loss: 0.5921 - acc: 0.6800 - val_loss: 0.5735 - val_acc: 0.6932\n","Epoch 2/15\n","10002/10002 [==============================] - 225s 23ms/step - loss: 0.5521 - acc: 0.7152 - val_loss: 0.5661 - val_acc: 0.7022\n","Epoch 3/15\n","10002/10002 [==============================] - 226s 23ms/step - loss: 0.5234 - acc: 0.7381 - val_loss: 0.5673 - val_acc: 0.7029\n","Epoch 4/15\n","10002/10002 [==============================] - 226s 23ms/step - loss: 0.5047 - acc: 0.7527 - val_loss: 0.5723 - val_acc: 0.7015\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 41s 6ms/step - loss: 0.5608 - acc: 0.7060\n","\n"," 테스트 정확도: 0.7060\n","====================================\n","============7 iteration ============\n","embedding_dim : 100, hidden_units : 64, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5871 - acc: 0.6830 - val_loss: 0.5711 - val_acc: 0.6976\n","Epoch 2/15\n","10002/10002 [==============================] - 200s 20ms/step - loss: 0.5373 - acc: 0.7260 - val_loss: 0.5607 - val_acc: 0.7067\n","Epoch 3/15\n","10002/10002 [==============================] - 186s 19ms/step - loss: 0.4976 - acc: 0.7554 - val_loss: 0.5697 - val_acc: 0.7042\n","Epoch 4/15\n","10002/10002 [==============================] - 184s 18ms/step - loss: 0.4624 - acc: 0.7787 - val_loss: 0.5808 - val_acc: 0.6997\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 39s 6ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============8 iteration ============\n","embedding_dim : 100, hidden_units : 64, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 190s 19ms/step - loss: 0.5886 - acc: 0.6822 - val_loss: 0.5710 - val_acc: 0.6973\n","Epoch 2/15\n","10002/10002 [==============================] - 190s 19ms/step - loss: 0.5409 - acc: 0.7242 - val_loss: 0.5625 - val_acc: 0.7066\n","Epoch 3/15\n","10002/10002 [==============================] - 185s 18ms/step - loss: 0.5030 - acc: 0.7528 - val_loss: 0.5672 - val_acc: 0.7045\n","Epoch 4/15\n","10002/10002 [==============================] - 193s 19ms/step - loss: 0.4716 - acc: 0.7740 - val_loss: 0.5803 - val_acc: 0.6982\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============9 iteration ============\n","embedding_dim : 100, hidden_units : 128, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 193s 19ms/step - loss: 0.5880 - acc: 0.6822 - val_loss: 0.5717 - val_acc: 0.6959\n","Epoch 2/15\n","10002/10002 [==============================] - 196s 20ms/step - loss: 0.5389 - acc: 0.7252 - val_loss: 0.5638 - val_acc: 0.7052\n","Epoch 3/15\n","10002/10002 [==============================] - 188s 19ms/step - loss: 0.5009 - acc: 0.7537 - val_loss: 0.5664 - val_acc: 0.7031\n","Epoch 4/15\n","10002/10002 [==============================] - 198s 20ms/step - loss: 0.4648 - acc: 0.7786 - val_loss: 0.5864 - val_acc: 0.6998\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============10 iteration ============\n","embedding_dim : 100, hidden_units : 128, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5891 - acc: 0.6817 - val_loss: 0.5743 - val_acc: 0.6965\n","Epoch 2/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5405 - acc: 0.7249 - val_loss: 0.5635 - val_acc: 0.7041\n","Epoch 3/15\n","10002/10002 [==============================] - 201s 20ms/step - loss: 0.5036 - acc: 0.7525 - val_loss: 0.5643 - val_acc: 0.7041\n","Epoch 4/15\n","10002/10002 [==============================] - 202s 20ms/step - loss: 0.4695 - acc: 0.7758 - val_loss: 0.6030 - val_acc: 0.6981\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 42s 7ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============11 iteration ============\n","embedding_dim : 100, hidden_units : 256, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 252s 25ms/step - loss: 0.5893 - acc: 0.6815 - val_loss: 0.5707 - val_acc: 0.6973\n","Epoch 2/15\n","10002/10002 [==============================] - 252s 25ms/step - loss: 0.5391 - acc: 0.7254 - val_loss: 0.5636 - val_acc: 0.7059\n","Epoch 3/15\n","10002/10002 [==============================] - 245s 25ms/step - loss: 0.5042 - acc: 0.7523 - val_loss: 0.5670 - val_acc: 0.7044\n","Epoch 4/15\n","10002/10002 [==============================] - 244s 24ms/step - loss: 0.4676 - acc: 0.7772 - val_loss: 0.5829 - val_acc: 0.6948\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============12 iteration ============\n","embedding_dim : 100, hidden_units : 256, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 255s 25ms/step - loss: 0.5907 - acc: 0.6808 - val_loss: 0.5797 - val_acc: 0.6966\n","Epoch 2/15\n","10002/10002 [==============================] - 248s 25ms/step - loss: 0.5457 - acc: 0.7209 - val_loss: 0.5758 - val_acc: 0.7017\n","Epoch 3/15\n","10002/10002 [==============================] - 247s 25ms/step - loss: 0.5126 - acc: 0.7468 - val_loss: 0.5810 - val_acc: 0.7016\n","Epoch 4/15\n","10002/10002 [==============================] - 252s 25ms/step - loss: 0.4828 - acc: 0.7682 - val_loss: 0.5787 - val_acc: 0.6961\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 41s 7ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============13 iteration ============\n","embedding_dim : 150, hidden_units : 64, dropout_prob : 0\n","Epoch 1/15\n","10002/10002 [==============================] - 201s 20ms/step - loss: 0.5869 - acc: 0.6836 - val_loss: 0.5693 - val_acc: 0.6986\n","Epoch 2/15\n","10002/10002 [==============================] - 189s 19ms/step - loss: 0.5345 - acc: 0.7285 - val_loss: 0.5640 - val_acc: 0.7039\n","Epoch 3/15\n","10002/10002 [==============================] - 189s 19ms/step - loss: 0.4925 - acc: 0.7591 - val_loss: 0.5761 - val_acc: 0.7012\n","Epoch 4/15\n","10002/10002 [==============================] - 189s 19ms/step - loss: 0.4514 - acc: 0.7864 - val_loss: 0.5914 - val_acc: 0.6971\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 41s 7ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============14 iteration ============\n","embedding_dim : 150, hidden_units : 64, dropout_prob : 0.2\n","Epoch 1/15\n","10002/10002 [==============================] - 194s 19ms/step - loss: 0.5880 - acc: 0.6822 - val_loss: 0.5772 - val_acc: 0.6947\n","Epoch 2/15\n","10002/10002 [==============================] - 197s 20ms/step - loss: 0.5365 - acc: 0.7275 - val_loss: 0.5616 - val_acc: 0.7053\n","Epoch 3/15\n","10002/10002 [==============================] - 189s 19ms/step - loss: 0.4959 - acc: 0.7576 - val_loss: 0.5743 - val_acc: 0.7009\n","Epoch 4/15\n","10002/10002 [==============================] - 198s 20ms/step - loss: 0.4581 - acc: 0.7820 - val_loss: 0.5829 - val_acc: 0.6968\n","Epoch 00004: early stopping\n","6254/6254 [==============================] - 40s 6ms/step - loss: 0.5594 - acc: 0.7082\n","\n"," 테스트 정확도: 0.7082\n","====================================\n","============15 iteration ============\n","embedding_dim : 150, hidden_units : 128, dropout_prob : 0\n","Epoch 1/15\n"," 9860/10002 [============================>.] - ETA: 2s - loss: 0.5875 - acc: 0.6826"]}]},{"cell_type":"code","metadata":{"id":"UMBBr5YG-xn5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MEDC5w68bhQo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8e0686fc-903e-467b-b991-309afc63fae4"},"source":["model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","history = model.fit(X_train, y_train, epochs=15, callbacks=[es, mc], batch_size=64, validation_split=0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","10000/10002 [============================>.] - ETA: 0s - loss: 0.5875 - acc: 0.6824\n","Epoch 00001: val_acc improved from -inf to 0.69867, saving model to best_model.h5\n","10002/10002 [==============================] - 190s 18ms/step - loss: 0.5875 - acc: 0.6824 - val_loss: 0.5707 - val_acc: 0.6987\n","Epoch 2/15\n","10000/10002 [============================>.] - ETA: 0s - loss: 0.5353 - acc: 0.7276\n","Epoch 00002: val_acc improved from 0.69867 to 0.70733, saving model to best_model.h5\n","10002/10002 [==============================] - 187s 19ms/step - loss: 0.5353 - acc: 0.7276 - val_loss: 0.5600 - val_acc: 0.7073\n","Epoch 3/15\n","10000/10002 [============================>.] - ETA: 0s - loss: 0.4974 - acc: 0.7554\n","Epoch 00003: val_acc did not improve from 0.70733\n","10002/10002 [==============================] - 185s 19ms/step - loss: 0.4974 - acc: 0.7554 - val_loss: 0.5631 - val_acc: 0.7029\n","Epoch 4/15\n","10000/10002 [============================>.] - ETA: 0s - loss: 0.4635 - acc: 0.7783\n","Epoch 00004: val_acc did not improve from 0.70733\n","10002/10002 [==============================] - 179s 18ms/step - loss: 0.4635 - acc: 0.7783 - val_loss: 0.5815 - val_acc: 0.6987\n","Epoch 00004: early stopping\n"]}]},{"cell_type":"code","metadata":{"id":"Gdnbsig_bjiL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"08dca3b5-f852-49b2-f1d3-d3297362058f"},"source":["loaded_model = load_model('best_model.h5')\n","print(\"\\n 테스트 정확도: %.4f\" % (loaded_model.evaluate(X_test, y_test)[1]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6254/6254 [==============================] - 40s 6ms/step - loss: 0.5582 - acc: 0.7093\n","\n"," 테스트 정확도: 0.7093\n"]}]}]}